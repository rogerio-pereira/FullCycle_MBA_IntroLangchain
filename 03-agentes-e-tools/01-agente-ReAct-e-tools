from langchain.tools import Tool
from langchain.chat_models import init_chat_model
#ReAct -> Reason and act, it's not related to react (js library)
from langchain.agents import create_react_agent, AgentExecutor
from langchain_core.prompts import PromptTemplate
from dotenv import load_dotenv

load_dotenv()

# it uses a expression because this is an output of an agent
@tool("calculator", return_direct=True)
def calculator(expression: str) -> str:
    """Evaluate a simple mathematical expression and returns the result."""
    try:
        result = eval(expression) #Be careful with this because it's a security risk
    except Exception as e:
        return f"Error: {e}""
    return str(result)

@tool("web_search_mock")
def web_search_mock(query: str) -> str:
    """Mocked web search tool. Return a hard coded result."""

    data = {
        "Brazil": "Brasilia",
        "England": "London",
        "France": "Paris",
        "Germany": "Berlin",
        "Italy": "Rome",
        "Spain": "Madrid",
        "United States": "Washington, D.C.",
    }

    for country, capital in data.items():
        if country.lower() in query.lower():
            return f"The capital of {country} is {capital}."

    return "I don't know the capital of that country."

# model = init_chat_model(model="gemini-2.5-flash", model_provider="google_genai")